// Copyright 2024 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package digitalkin.store.v1;

import "digitalkin/store/v1/block.proto";
import "digitalkin/store/v1/details.proto";
import "digitalkin/store/v1/review.proto";
import "digitalkin/store/v1/store.proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// StoreService
service StoreService {
    // CreateKinResume
    //
    // Parameters:
    //
    // - name: Kin name
    // - short_description: Kin short description
    //
    // Returns:
    //
    // - Kin
    rpc CreateKinResume(CreateKinResumeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/store/create"
            body: "*"
        };
    }

    // DisableKinResume
    //
    // Parameters:
    //
    // - kin_id: Kin id
    //
    // Returns:
    //
    // - Ok if the Kin was disabled
    rpc DisableKinResume(DisableKinResumeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/disable"
        };
    }

    // ReadAllKins
    //
    // Parameters:
    //
    // - page: Page number
    // - limit: Limit of items per page
    //
    // Returns:
    //
    // - ListStore
    rpc ReadAllKins(ReadAllKinsRequest) returns (ReadAllKinsResponse) {
        option (google.api.http) = {
            get: "/v1/store/read"
        };
    }

    // ReadKinResume
    //
    // Parameters:
    //
    // - kin_id: Kin id
    //
    // Returns:
    //
    // - StoreResume
    rpc ReadKinResume(ReadKinResumeRequest) returns (StoreResume) {
        option (google.api.http) = {
            get: "/v1/store/{kin_id}/read"
        };
    }

    // UpdateName
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - name: Kin name
    //
    // Returns:
    //
    // - Ok if the Kin name was updated
    rpc UpdateName(UpdateKinNameRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/name"
            body: "*"
        };
    }

    // UpdateShortDescription
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - short_description: Kin short description
    //
    // Returns:
    //
    // - Ok if the Kin short description was updated
    rpc UpdateShortDescription(UpdateKinShortDescriptionRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/short_description"
            body: "*"
        };
    }

    // UpdateImage
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - image: Kin image
    //
    // Returns:
    //
    // - Ok if the Kin image was updated
    rpc UpdateImage(UpdateKinImageRequest) returns (UpdateKinImageResponse) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/image"
            body: "*"
        };
    }

    // UpdateBlock
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - block: Kin block
    //
    // Returns:
    //
    // - Ok if the Kin block description was updated
    rpc UpdateBlock(UpdateKinBlockRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/block"
            body: "*"
        };
    }

    // AddBlock
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - block: Kin block
    //
    // Returns:
    //
    // - Ok if the Kin block description was added
    rpc AddBlock(AddKinBlockRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/store/{kin_id}/block"
            body: "*"
        };
    }

    // DeleteBlock
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - block_id: Kin block id
    //
    // Returns:
    //
    // - Ok if the Kin block description was deleted
    rpc DeleteBlock(DeleteKinBlockRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/store/{kin_id}/block/{block_id}"
        };
    }

    // UpdateLanguages
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - languages: Kin languages
    //
    // Returns:
    //
    // - Ok if the Kin languages were updated
    rpc UpdateLanguages(UpdateKinLanguagesRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/languages"
            body: "*"
        };
    }

    // UpdateFramework
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - framework: Kin framework
    //
    // Returns:
    //
    // - Ok if the Kin framework was updated
    rpc UpdateFramework(UpdateKinFrameworkRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/framework"
            body: "*"
        };
    }

    // UpdateLicense
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - license: Kin license
    //
    // Returns:
    //
    // - Ok if the Kin license was updated
    rpc UpdateLicense(UpdateKinLicenseRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/license"
            body: "*"
        };
    }

    // UpdateDocumentation
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - documentation: Kin documentation
    //
    // Returns:
    //
    // - Ok if the Kin documentation was updated
    rpc UpdateDocumentation(UpdateKinDocumentationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/documentation"
            body: "*"
        };
    }

    // CreateReview
    //
    // Parameters:
    //
    // - kin_id: Kin id
    // - user_name: User name
    // - user_avatar: User avatar
    // - review: Review
    // - review_comment: Review comment
    //
    // Returns:
    //
    // - Review
    rpc CreateReview(CreateKinReviewRequest) returns (Review) {
        option (google.api.http) = {
            post: "/v1/store/{kin_id}/review"
            body: "*"
        };
    }

    // UpdateReview
    //
    // Parameters:
    //
    // - id: Review id
    // - kin_id: Kin id
    // - review: Review
    // - review_comment: Review comment
    //
    // Returns:
    //
    // - Ok if the review was updated
    rpc UpdateReview(UpdateKinReviewRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/store/{kin_id}/review/{review_id}",
            body: "*"
        };
    }
}
