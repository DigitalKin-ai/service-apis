// Copyright 2025 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package digitalkin.storage.v2;

import "buf/validate/validate.proto";
import "google/protobuf/struct.proto";
import "google/protobuf/timestamp.proto";

// DataType: Enum to data type
enum DataType {
    // OUTPUT: Data generated by the system
    OUTPUT = 0;
    // VIEW: Data to be displayed
    VIEW = 1;
    // you can add more types here
}

// StorageData: Message to represent stored data
message StorageData {
    // data: JSON Object to store
    google.protobuf.Struct data = 1 [(buf.validate.field).required = true];
    // mission_id: Mission ID linked to the data
    string mission_id = 2 [(buf.validate.field).required = true, (buf.validate.field).string.prefix = "missions:"];
    // name: Name of the data (unique by mission_id)
    string name = 3 [(buf.validate.field).required = true];
    // timestamp: Timestamp of the data
    google.protobuf.Timestamp timestamp = 4 [(buf.validate.field).required = true];
    // type: Type of the data
    DataType type = 5 [(buf.validate.field).required = true];
}

// StoreDataRequest: Request to store data
message StoreDataRequest {
    // data: Data to store or to retrieve
    google.protobuf.Struct data = 1 [(buf.validate.field).required = true];
    // mission_id: Mission ID linked to the data
    string mission_id = 2 [(buf.validate.field).required = true, (buf.validate.field).string.prefix = "missions:"];
    // name: Name of the data (unique by mission_id)
    string name = 3 [(buf.validate.field).required = true];
    // type: Type of the data
    DataType type = 4 [(buf.validate.field).required = true];
}

// StoreDataResponse: Response to stored data
message StoreDataResponse {
    // success: Success of the operation
    bool success = 1 [(buf.validate.field).required = true];
    // stored_data: Stored data
    StorageData stored_data = 2 [(buf.validate.field).required = true];
}

// GetDataByMissionRequest: Request to get data by mission
message GetDataByMissionRequest {
    // mission_id: Mission ID linked to the data
    string mission_id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.prefix = "missions:"];
}

// GetDataByMissionResponse: Response to get data by mission
message GetDataByMissionResponse {
    // data_items: Data items
    repeated StorageData data_items = 1;
}

// GetDataByNameRequest: Request to get data by mission and name
message GetDataByNameRequest {
    // mission_id: Mission ID linked to the data
    string mission_id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.prefix = "missions:"];
    // name: Name of the data (unique by mission_id)
    DataType name = 2 [(buf.validate.field).required = true];
}

// GetDataByNameResponse: Response to get data by mission and name
message GetDataByNameResponse {
    // success: Success of the operation
    bool success = 1 [(buf.validate.field).required = true];
    // stored_data: Stored data
    StorageData stored_data = 2 [(buf.validate.field).required = true];
}

// GetDataByTypeRequest: Request to get data by type
message GetDataByTypeRequest {
    // mission_id: Mission ID linked to the data
    string mission_id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.prefix = "missions:"];
    // type: Type of the data
    DataType type = 2 [(buf.validate.field).required = true];
}

// GetDataByTypeResponse: Response to get data by type
message GetDataByTypeResponse {
    // success: Success of the operation
    bool success = 1 [(buf.validate.field).required = true];
    // stored_data: Stored data
    StorageData stored_data = 2 [(buf.validate.field).required = true];
}

// DeleteDataRequest: Request to delete data
message DeleteDataRequest {
    // mission_id: Mission ID linked to the data
    string mission_id = 1 [(buf.validate.field).required = true, (buf.validate.field).string.prefix = "missions:"];
    // name: Name of the data (unique by mission_id)
    string name = 2 [(buf.validate.field).required = true];
}

// DeleteDataResponse: Response to delete data
message DeleteDataResponse {
    // success: Success of the operation
    bool success = 1 [(buf.validate.field).required = true];
}