// Copyright 2025 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package digitalkin.module_registry.v2;

import "buf/validate/validate.proto";


// ModuleStatus mirroring a module instance state,
enum ModuleStatus {
    // RUNNING: Module alive.
    RUNNING = 0;
    // IDLE: Module waiting for an event / update.
    IDLE = 1;
    // ENDED: Module signals the end of task or have been killed.
    ENDED = 2;
}

// ModuleStatusRequest
message ModuleStatusRequest {
    // module_id: Database ID of the job inside the Module.
    string module_id = 1 [(buf.validate.field).string.min_len = 1, (buf.validate.field).string.prefix = "modules:", (buf.validate.field).required = true];
}

// ModuleStatusResponse
message ModuleStatusResponse {
    // module_id: Database ID of the job inside the Module.
    string module_id = 1 [(buf.validate.field).string.min_len = 1, (buf.validate.field).string.prefix = "modules:", (buf.validate.field).required = true];
    // status: Representation of the Module current state (running, idle, ended...).
    ModuleStatus status = 2;
    // message: (Optional) Details about the status.
    optional string message = 3;
}

// GetAllModulesStatusRequest
message GetAllModulesStatusRequest {
}

// ListModulesStatusRequest
message ListModulesStatusRequest {
    // list_size: (Optional) The maximum number of module status to return in the response.
    optional int32 list_size = 1;
    // offset: (Optional) define the start index to start the list.
    optional int32 offset = 2;
}

// ListModulesStatusResponse
message ListModulesStatusResponse {
    // list_size: length of the modules_status list.
    int32 list_size = 1;
    // modules_statuses: List of modules with their respective IDs and statuses.
    repeated ModuleStatusResponse modules_statuses = 2;
}


// UpdateStatusRequest
message UpdateStatusRequest {
    // module_id: Id of the module
    string module_id = 1 [(buf.validate.field).string.min_len = 1, (buf.validate.field).required = true];
    // status: Set new fixed value for the current module.
    ModuleStatus status = 2;
}

// UpdateStatusResponse
message UpdateStatusResponse {
    // success: True if the status was updated
    bool success = 1;
}
