// Copyright 2024 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

syntax = "proto3";

package digitalkin.module_registry.v2;

import "digitalkin/module_registry/v2/action.proto";
import "digitalkin/module_registry/v2/discover.proto";
import "digitalkin/module_registry/v2/status.proto";

import "google/protobuf/empty.proto";

// ModuleRegistryService
// It manages the registration, discovery, and status tracking of modules within a multi-agent system (MAS).
// In the context of MAS, this service allows autonomous agents to register their modules, making their capabilities 
// discoverable by other agents. It facilitates dynamic collaboration by enabling agents to find and interact 
// with available modules in real-time. Additionally, it ensures that the status of each module is kept up to date,
// supporting the overall adaptability and coordination of the multi-agent environment.
service ModuleRegistryService {
    // registration.proto
    // RegisterModule
    rpc RegisterModule(RegisterRequest) returns (RegisterResponse) {}
    // DeregisterModule
    rpc DeregisterModule(DeregisterRequest) returns (DeregisterResponse) {}
    
    // action.proto
    // DiscoverModule
    rpc DiscoverInfoModule(DiscoverInfoRequest) returns (DiscoverInfoResponse) {}
    // DiscoverModule
    rpc DiscoverSearchModule(DiscoverSearchRequest) returns (DiscoverSearchResponse) {}

    // status.proto
    // GetModuleStatus
    rpc GetModuleStatus(ModuleStatusRequest) returns (ModuleStatusResponse) {}
    // ListModuleStatus
    rpc ListModuleStatus(ListModulesStatusRequest) returns (ListModuleStatusResponse) {}
    // GetAllModuleStatus
    rpc GetAllModuleStatus(GetAllModulesStatusRequest) returns (stream ModuleStatusResponse) {}
    // UpdateModuleStatus
    rpc UpdateModuleStatus(UpdateStatusRequest) returns (UpdateStatusResponse) {}
}
