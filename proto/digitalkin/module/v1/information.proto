// Copyright 2024 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";

package digitalkin.module.v1;

import "buf/validate/validate.proto";
import "google/protobuf/struct.proto";

// GetModuleInputRequest
//
// Fields:
//
// - module_id: Database ID of the Module to get input schema
// - llm_format: Define if the input schema should be in LLM format or raw pydantic format
message GetModuleInputRequest {
    // module_id: Database ID of the Module to get input schema
    string module_id = 1 [(buf.validate.field).string.min_len = 1, (buf.validate.field).string.prefix = "modules:", (buf.validate.field).required = true];
    // llm_format: Define if the input schema should be in LLM format or raw pydantic format
    bool llm_format = 2;
}

// GetModuleOutputRequest
//
// Fields:
//
// - module_id: Database ID of the Module to get output schema
// - llm_format: Define if the output schema should be in LLM format or raw pydantic format
message GetModuleOutputRequest {
    // module_id: Database ID of the Module to get output schema
    string module_id = 1 [(buf.validate.field).string.min_len = 1, (buf.validate.field).string.prefix = "modules:", (buf.validate.field).required = true];
    // llm_format: Define if the output schema should be in LLM format or raw pydantic format
    bool llm_format = 2;
}

// GetModuleSetupRequest
//
// Fields:
//
// - module_id: Database ID of the Module to get output schema
// - llm_format: Define if the output schema should be in LLM format or raw pydantic format
message GetModuleSetupRequest {
    // module_id: Database ID of the Module to get output schema
    string module_id = 1 [(buf.validate.field).string.min_len = 1, (buf.validate.field).string.prefix = "modules:", (buf.validate.field).required = true];
    // llm_format: Define if the output schema should be in LLM format or raw pydantic format
    bool llm_format = 2;
}

// GetModuleInputResponse
//
// Returns:
//
// - success: Flag to indicate if the input schema request was successful
// - input_schema: Input schema of the Module
message GetModuleInputResponse {
    // success: Flag to indicate if the input schema request was successful
    bool success = 1;
    // input_schema: Input schema of the Module
    google.protobuf.Struct input_schema = 2 [(buf.validate.field).required = true];
}

// GetModuleOutputResponse
//
// Returns:
//
// - success: Flag to indicate if the input schema request was successful
// - output_schema: Output schema of the Module
message GetModuleOutputResponse {
    // success: Flag to indicate if the output schema request was successful
    bool success = 1;
    // output_schema: Output schema of the Module
    google.protobuf.Struct output_schema = 2 [(buf.validate.field).required = true];
}

// GetModuleSetupResponse
//
// Returns:
//
// - success: Flag to indicate if the input schema request was successful
// - setup_schema: Setup schema of the Module
message GetModuleSetupResponse {
    // success: Flag to indicate if the setup schema request was successful
    bool success = 1;
    // setup_schema: Setup schema of the Module
    google.protobuf.Struct setup_schema = 2 [(buf.validate.field).required = true];
}