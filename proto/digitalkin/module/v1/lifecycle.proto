// Copyright 2024 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.


syntax = "proto3";

package digitalkin.module.v1;

import "buf/validate/validate.proto";
import "google/api/field_behavior.proto";
import "google/protobuf/struct.proto";

// RequestType
enum RequestType {
    // REQUEST_TYPE_UNKNOWN is the default value
    REQUEST_TYPE_UNKNOWN = 0;
    // REQUEST_TYPE_CONNECTION is equal to: Connect to a room
    REQUEST_TYPE_CONNECTION = 1;
    // REQUEST_TYPE_SEND is equal to: Send a new message in the room
    REQUEST_TYPE_SEND = 2;
    // REQUEST_TYPE_EXIT is equal to: Leave the room
    REQUEST_TYPE_EXIT = 3;
    // REQUEST_TYPE_VALIDATE is equal to: Launch the validation of requests in the room
    REQUEST_TYPE_VALIDATE = 4;
    // REQUEST_TYPE_DESTROY is equal to: Destroy the room
    REQUEST_TYPE_DESTROY = 5;
}

// StartResponseType
enum StartResponseType {
    // START_RESPONSE_TYPE_UNKNOWN is the default value
    START_RESPONSE_TYPE_UNKNOWN = 0;
    // START_RESPONSE_TYPE_CONNECTION is Connection to the room
    START_RESPONSE_TYPE_CONNECTION = 1;
    // START_RESPONSE_TYPE_INPUT is New input data in the room
    START_RESPONSE_TYPE_INPUT = 2;
    // START_RESPONSE_TYPE_OUTPUT is New output data comming from a job instance
    START_RESPONSE_TYPE_OUTPUT = 3;
    // START_RESPONSE_TYPE_ERROR is Error message
    START_RESPONSE_TYPE_ERROR = 4;
}

// ModuleRole
enum ModuleRole {
    // MODULE_ROLE_UNKNOWN is the default value
    MODULE_ROLE_UNKNOWN = 0;
    // MODULE_ROLE_OWNER is owner of the room
    MODULE_ROLE_OWNER = 1;
    // MODULE_ROLE_MEMBRE is juste member of the room
    MODULE_ROLE_MEMBRE = 2;
}

// ConnectionRequest
//
// Fields:
// - room_id: The room id to send the request
// - module_id: Id of the sender module
// - module_role: role of the sender module in the room (only owner can validate a request and so start the module)
message ConnectionRequest {
    // room_id: The room id to send the request
    string room_id = 1 [(buf.validate.field).required = false, (google.api.field_behavior) = OPTIONAL];
    // module_id: Id of the sender module
    string module_id = 2 [(buf.validate.field).string.min_len = 1, (buf.validate.field).string.prefix = "modules:", (buf.validate.field).required = true];
    // module_role: role of the sender module in the room (only owner can validate a request and so start the module)
    ModuleRole module_role = 3 [(buf.validate.field).enum.defined_only = true, (buf.validate.field).required = true];
}

// InputDataRequest
//
// Fields:
// - input: Structured input data for the module
// - setup_id: Database ID of the setupused to start the module
// - instance_id: ID of the instance of a module inside a setup used to retrieve a specific module setup
// - module_ids: List of Modules IDs to start
message InputDataRequest {
    // input: Structured input data for the module
    google.protobuf.Struct input = 1 [(buf.validate.field).required = true];
    // setup_id: Database ID of the setup used to start the module
    string setup_id = 2 [(buf.validate.field).string.min_len = 1, (buf.validate.field).string.prefix = "setups:", (buf.validate.field).required = true];
    // instance_id: ID of the instance of a module inside a setup used to retrieve a specific module setup
    string instance_id = 3 [(buf.validate.field).string.min_len = 1, (buf.validate.field).required = true];
    // module_ids: List of Modules IDs to start
    repeated string module_ids = 4 [(buf.validate.field).repeated.min_items = 0, (buf.validate.field).repeated.items = { string: { min_len: 1, prefix: "modules:" } }, (google.api.field_behavior) = OPTIONAL];
}

// StartModuleRequest
//
// Fields:
//
// - input: Structured input data for the module
// - content: Response content
// - connection_request: Request to connect to the room
// - input_request: Request to add input data in the room
message StartModuleRequest {
    // request_type: type of the request send to the Module
    RequestType request_type = 1 [(buf.validate.field).enum.defined_only = true, (buf.validate.field).required = true];
    // content: Response content
    oneof content {
        // connection_request: Request to connect to the room
        ConnectionRequest connection_request = 2;
        // input_request: Request to add input data in the room
        InputDataRequest input_request = 3;
    }
}

// StopModuleRequest
//
// Fields:
//
// - module_id: Database ID of the Module to stop
message StopModuleRequest {
    // job_id: Database ID of the job to stop
    string job_id = 1 [(buf.validate.field).string.min_len = 1, (buf.validate.field).string.prefix = "jobs:", (buf.validate.field).required = true];
    //? maybe add a the job id to stop and also the setup id, but it's not clear yet
}

// ConnectionResponse
// Connections information when starting a module
//
// Returns:
//
// - message: Message with the result of the operation
// - room_id: ID of the Room that was connected
message ConnectionResponse {
    // message: Message with the result of the operation
    string message = 2 [(buf.validate.field).string.min_len = 1, (buf.validate.field).required = true];
    // room_id: ID of the Room that was connected
    optional string room_id = 3 [(buf.validate.field).string.min_len = 1, (buf.validate.field).required = true];
}

// InputDataResponse
// Input data in the room when starting a module
//
// Returns:
//
// - message: Message with the result of the operation
// - input: Structured input data for the module
message InputDataResponse {
    // message: Message with the result of the operation
    string message = 2 [(buf.validate.field).string.min_len = 1, (buf.validate.field).required = true];
    // input: Structured input data for the module
    google.protobuf.Struct input = 1 [(buf.validate.field).required = true];
}

// OutputDataResponse
// Output data returned by a job during the execution of a started module
//
// Returns:
//
// - message: Message with the result of the operation
// - output: Structured output data a job
// - job_id: Database ID of the job  inside the Module that was queried
message OutputDataResponse {
    // message: Message with the result of the operation
    string message = 2 [(buf.validate.field).string.min_len = 1, (buf.validate.field).required = true];
    // output: Structured output data a job
    google.protobuf.Struct output = 1 [(buf.validate.field).required = true];
    // job_id: Database ID of the job  inside the Module that was queried
    string job_id = 3 [(buf.validate.field).string.min_len = 1, (buf.validate.field).string.prefix = "jobs:", (buf.validate.field).required = true];
}

// ErrorResponse
// Error message when starting a module
//
// Returns:
//
// - message: Message with the result of the operation
// - details: Message with the result of the operation
message ErrorResponse {
    // message: Message with the result of the operation
    string message = 2 [(buf.validate.field).string.min_len = 1, (buf.validate.field).required = true];
    // details: Message with the result of the operation
    string details = 3 [(buf.validate.field).string.max_len = 2048];
}

// StartModuleResponse
//
// Returns:
//
// - success: Flag to indicate if the started/stopped request was successful
// - response_type: Type of the response
// - connection: Response with the connection to the room
// - input_response: Response with the input data
// - output_response: Response with the output data
// - error: Response with the error message
// - module_id: Database ID of the Module that was started/stopped
message StartModuleResponse {
    // success: Flag to indicate if the started/stopped request was successful
    bool success = 1;
    // response_type: Type of the response
    StartResponseType response_type = 2 [(buf.validate.field).enum.defined_only = true];
    // content: Response content
    oneof content {
        // connection: Response with the connection to the room
        ConnectionResponse connection = 3;
        // input_response: Response with the input data
        InputDataResponse input_response = 4;
        // output_response: Response with the output data
        OutputDataResponse output_response = 5;
        // error: Response with the error message
        ErrorResponse error = 6;
    }
    // module_id: Database ID of the Module that was started/stopped
    optional string module_id = 7 [(buf.validate.field).string.prefix = "modules:", (google.api.field_behavior) = OPTIONAL];
}

// StopModuleResponse
//
// Returns:
//
// - success: Flag to indicate if the started/stopped request was successful
// - message: Message with the result of the operation
// - module_id: Database ID of the Module that was started/stopped
message StopModuleResponse {
    // success: Flag to indicate if the started/stopped request was successful
    bool success = 1;
    // message: Message with the result of the operation
    string message = 2 [(buf.validate.field).string.min_len = 1, (buf.validate.field).required = true];
    // job_id: Database ID of the Module that was started/stopped
    optional string job_id = 3 [(buf.validate.field).string.prefix = "jobs:", (google.api.field_behavior) = OPTIONAL];
}