syntax = "proto3";

package digitalkin.kin.v1;

import "google/api/annotations.proto";

service KinWorkflowService {
  // Create
  rpc CreateKinWorkflow(CreateKinWorkflowRequest) returns (Workflow) {
    option (google.api.http) = {
      post: "/v1/workflow"
      body: "*"
    };
  }

  // Read
  rpc ReadKinWorkflow(ReadKinWorkflowRequest) returns (stream Workflow) {
    option (google.api.http) = {
      get: "/v1/workflow/{id}"
    };
  }

  // Add
  rpc AddNodeWorkflow(AddNodeWorkflowRequest) returns (AddNodeWorkflowResponse) {
    option (google.api.http) = {
      post: "/v1/workflow/{id}/node"
      body: "*"
    };
  }
  rpc AddEdgeWorkflow(AddEdgeWorkflowRequest) returns (AddEdgeWorkflowResponse) {
    option (google.api.http) = {
      post: "/v1/workflow/{id}/edge"
      body: "*"
    };
  }

  // Update Node
  rpc UpdateNodePositionWorkflow(UpdateNodePositionWorkflowRequest) returns (UpdateNodePositionWorkflowResponse) {
    option (google.api.http) = {
      put: "/v1/workflow/{id}/node/{nodeId}/position"
      body: "*"
    };
  }

  // Delete
  rpc DeleteNodeWorkflow(DeleteNodeWorkflowRequest) returns (DeleteNodeWorkflowResponse) {
    option (google.api.http) = {
      delete: "/v1/workflow/{id}/node/{nodeId}/delete"
    };
  }
  rpc DeleteEdgeWorkflow(DeleteEdgeWorkflowRequest) returns (DeleteEdgeWorkflowResponse) {
    option (google.api.http) = {
      delete: "/v1/workflow/{id}/edge/{edgeId}/delete"
    };
  }
}

// Common
message DataEdge {
  string color = 1;
  bool running = 2;
}

message Edge {
  string id = 1;
  string source = 2;
  optional string sourceHandle = 3;
  string target = 4;
  optional string targetHandle = 5;
  optional string type = 6;
  DataEdge data = 7;
}

message Position {
  float x = 1;
  float y = 2;
}

message Target {
  string label = 1;
  string type = 2;
}

message Source {
  string label = 1;
  string type = 2;
}
  

message DataNode {
  string id = 1;
  string name = 2;
  string type = 3;
  string color = 4;
  repeated Target targets = 5;
  repeated Source sources = 6;
}

message Measured {
  int64 width = 1;
  int64 height = 2;
}

message Node {
  string id = 1;
  string type = 2;
  Position position = 3;
  DataNode data = 4;
  optional Measured measured = 7;
  bool selected = 8;
  bool dragging = 9;
}

message Workflow {
  repeated Edge edges = 1;
  repeated Node nodes = 2;
}

// Create Kin Workflow
message CreateKinWorkflowRequest {
  string kinId = 1;
}

// Read Kin Workflow
message ReadKinWorkflowRequest {
  string kinId = 1;
}

// Add Node Kin Workflow
message AddNodeWorkflowRequest {
  string kinId = 1;
  Node node = 2;
}
message AddNodeWorkflowResponse {}

// Add Edge Kin Workflow
message AddEdgeWorkflowRequest {
  string kinId = 1;
  Edge edge = 2;
}
message AddEdgeWorkflowResponse {}

// Update Node Position Kin Workflow
message UpdateNodePositionWorkflowRequest {
  string kinId = 1;
  string nodeId = 2;
  Position position = 3;
}
message UpdateNodePositionWorkflowResponse {}

// Delete Node Kin Workflow
message DeleteNodeWorkflowRequest {
  string kinId = 1;
  string nodeId = 2;
}
message DeleteNodeWorkflowResponse {}

// Delete Edge Kin Workflow
message DeleteEdgeWorkflowRequest {
  string kinId = 1;
  string edgeId = 2;
}
message DeleteEdgeWorkflowResponse {}
  