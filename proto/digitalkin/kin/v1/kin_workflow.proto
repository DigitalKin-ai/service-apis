syntax = "proto3";

package digitalkin.kin.v1;

import "google/api/annotations.proto";

service KinWorkflowService {
  // Create Kin Workflow
  //
  // ## Parameters
  //
  // - kinId: Kin id
  //
  // ## Returns
  //
  // - Workflow
  rpc CreateKinWorkflow(CreateKinWorkflowRequest) returns (Workflow) {
    option (google.api.http) = {
      post: "/v1/workflow"
      body: "*"
    };
  }

  // Read Kin Workflow
  //
  // ## Parameters
  //
  // - kinId: Kin id
  //
  // ## Returns
  //
  // - Workflow
  rpc ReadKinWorkflow(ReadKinWorkflowRequest) returns (stream Workflow) {
    option (google.api.http) = {
      get: "/v1/workflow/{id}"
    };
  }
  // Read Store Blocks Kin Workflow
  //
  // ## Parameters
  //
  // - Nothing
  //
  // ## Returns
  //
  // - Store Blocks
  /* rpc ReadStoreBlocksWorkflow(ReadStoreBlocksWorkflowRequest) returns (stream WorkflowBlocksStore) {
    option (google.api.http) = {
      get: "/v1/workflow/store"
    };
  } */

  // Add Node
  //
  // ## Parameters
  //
  // - kinId: Kin id
  // - node: Node
  //
  // ## Returns
  //
  // - Ok if the node was added
  rpc AddNodeWorkflow(AddNodeWorkflowRequest) returns (AddNodeWorkflowResponse) {
    option (google.api.http) = {
      post: "/v1/workflow/{id}/node"
      body: "*"
    };
  }
  // Add Edge
  //
  // ## Parameters
  //
  // - kinId: Kin id
  // - edge: Edge
  //
  // ## Returns
  //
  // - Ok if the edge was added
  rpc AddEdgeWorkflow(AddEdgeWorkflowRequest) returns (AddEdgeWorkflowResponse) {
    option (google.api.http) = {
      post: "/v1/workflow/{id}/edge"
      body: "*"
    };
  }

  // Update Node Position
  //
  // ## Parameters
  //
  // - kinId: Kin id
  // - nodeId: Node id
  //
  // ## Returns
  //
  // - Ok if the node position was updated
  rpc UpdateNodePositionWorkflow(UpdateNodePositionWorkflowRequest) returns (UpdateNodePositionWorkflowResponse) {
    option (google.api.http) = {
      put: "/v1/workflow/{id}/node/{nodeId}/position"
      body: "*"
    };
  }

  // Delete Node
  //
  // ## Parameters
  //
  // - kinId: Kin id
  // - nodeId: Node id
  //
  // ## Returns
  //
  // - Ok if the node was deleted
  rpc DeleteNodeWorkflow(DeleteNodeWorkflowRequest) returns (DeleteNodeWorkflowResponse) {
    option (google.api.http) = {
      delete: "/v1/workflow/{id}/node/{nodeId}/delete"
    };
  }
  // Delete Edge
  //
  // ## Parameters
  //
  // - kinId: Kin id
  // - edgeId: Edge id
  //
  // ## Returns
  //
  // - Ok if the edge was deleted
  rpc DeleteEdgeWorkflow(DeleteEdgeWorkflowRequest) returns (DeleteEdgeWorkflowResponse) {
    option (google.api.http) = {
      delete: "/v1/workflow/{id}/edge/{edgeId}/delete"
    };
  }
}

// Common

// Data Edge
//
// ## Properties
//
// - color: Edge color
// - running: Edge running
message DataEdge {
  string color = 1;
  bool running = 2;
}

// Edge
//
// ## Properties
//
// - id: Edge id
// - source: Edge source
// - source_handle: Edge source handle
// - target: Edge target
// - target_handle: Edge target handle
// - type: Edge type
// - data: Edge data
message Edge {
  string id = 1;
  string source = 2;
  optional string source_handle = 3;
  string target = 4;
  optional string target_handle = 5;
  optional string type = 6;
  DataEdge data = 7;
}

// Position
//
// ## Properties
//
// - x: X position
// - y: Y position
message Position {
  float x = 1;
  float y = 2;
}

// Target
//
// ## Properties
//
// - label: Target label
// - type: Target type
message Target {
  string label = 1;
  string type = 2;
}

// Source
//
// ## Properties
//
// - label: Source label
// - type: Source type
message Source {
  string label = 1;
  string type = 2;
}
  
// Data Node
//
// ## Properties
//
// - id: Node id
// - name: Node name
message DataNode {
  string id = 1;
  string name = 2;
  string type = 3;
  string color = 4;
  repeated Target targets = 5;
  repeated Source sources = 6;
}

// Measured
//
// ## Properties
//
// - width: Measured width
// - height: Measured height
message Measured {
  int64 width = 1;
  int64 height = 2;
}

// Node
//
// ## Properties
//
// - id: Node id
// - type: Node type
// - position: Node position
// - data: Node data
// - measured: Node measured
// - selected: Node selected
// - dragging: Node dragging
message Node {
  string id = 1;
  string type = 2;
  Position position = 3;
  DataNode data = 4;
  optional Measured measured = 7;
  bool selected = 8;
  bool dragging = 9;
}

// Kin Workflow
//
// ## Properties
//
// - edges: List of edges
// - nodes: List of nodes
message Workflow {
  repeated Edge edges = 1;
  repeated Node nodes = 2;
}

// Store Blocks
//
// ## Properties
//
// - blocks: List of blocks
message WorkflowBlocksStore {
  repeated DataNode blocks = 1;
}

// Create Kin Workflow
//
// ## Properties
//
// - kinId: Kin id
message CreateKinWorkflowRequest {
  string kin_id = 1;
}

// Read Kin Workflow
//
// ## Properties
//
// - kinId: Kin id
message ReadKinWorkflowRequest {
  string kin_id = 1;
}

// Read Store Blocks Kin Workflow
//
// ## Properties
//
// - Nothing
message ReadStoreBlocksWorkflowRequest {}

// Add Node Kin Workflow
//
// ## Properties
//
// - kinId: Kin id
// - node: Node
message AddNodeWorkflowRequest {
  string kin_id = 1;
  Node node = 2;
}
// Add Node Kin Workflow Response
//
// ## Returns
//
// - Ok if the node was added
message AddNodeWorkflowResponse {}

// Add Edge Kin Workflow
//
// ## Properties
//
// - kinId: Kin id
// - edge: Edge
message AddEdgeWorkflowRequest {
  string kin_id = 1;
  Edge edge = 2;
}
// Add Edge Kin Workflow Response
//
// ## Returns
//
// - Ok if the edge was added
message AddEdgeWorkflowResponse {}

// Update Node Position Kin Workflow
//
// ## Properties
//
// - kinId: Kin id
// - nodeId: Node id
// - position: Position
message UpdateNodePositionWorkflowRequest {
  string kin_id = 1;
  string node_id = 2;
  Position position = 3;
}
// Update Node Position Kin Workflow Response
//
// ## Returns
//
// - Ok if the node position was updated
message UpdateNodePositionWorkflowResponse {}

// Delete Node Kin Workflow
//
// ## Properties
//
// - kinId: Kin id
// - nodeId: Node id
message DeleteNodeWorkflowRequest {
  string kin_id = 1;
  string node_id = 2;
}
// Delete Node Kin Workflow Response
//
// ## Returns
//
// - Ok if the node was deleted
message DeleteNodeWorkflowResponse {}

// Delete Edge Kin Workflow
//
// ## Properties
//
// - kinId: Kin id
// - edgeId: Edge id
message DeleteEdgeWorkflowRequest {
  string kin_id = 1;
  string edge_id = 2;
}
// Delete Edge Kin Workflow Response
//
// ## Returns
//
// - Ok if the edge was deleted
message DeleteEdgeWorkflowResponse {}
  