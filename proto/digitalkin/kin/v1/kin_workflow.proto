// Copyright 2024 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// List of available options:
// https://github.com/yoheimuta/protolint/blob/master/_example/config/.protolint.yaml

syntax = "proto3";

package digitalkin.kin.v1;

import "google/api/annotations.proto";

// KinWorkflowService
service KinWorkflowService {
  // CreateKinWorkflow
  //
  // ## Parameters
  //
  // - kin_id: Kin id
  //
  // ## Returns
  //
  // - Workflow
  rpc CreateKinWorkflow(CreateKinWorkflowRequest) returns (Workflow) {
    option (google.api.http) = {
      post: "/v1/workflow"
      body: "*"
    };
  }

  // ReadKinWorkflow
  //
  // ## Parameters
  //
  // - kin_id: Kin id
  //
  // ## Returns
  //
  // - Workflow
  rpc ReadKinWorkflow(ReadKinWorkflowRequest) returns (stream Workflow) {
    option (google.api.http) = {
      get: "/v1/workflow/{id}"
    };
  }

  // ReadKinNodesWorkflow
  //
  // ## Parameters
  //
  // - Nothing
  //
  // ## Returns
  //
  // - nodes: List of nodes
  rpc ReadKinNodesWorkflow(ReadKinNodesWorkflowRequest) returns (ReadKinNodesWorkflowResponse) {
    option (google.api.http) = {
      get: "/v1/workflow/nodes"
    };
  }

  // AddNodeWorkflow
  //
  // ## Parameters
  //
  // - kin_id: Kin id
  // - node: Node
  //
  // ## Returns
  //
  // - Ok if the node was added
  rpc AddNodeWorkflow(AddNodeWorkflowRequest) returns (AddNodeWorkflowResponse) {
    option (google.api.http) = {
      post: "/v1/workflow/{id}/node"
      body: "*"
    };
  }

  // AddEdgeWorkflow
  //
  // ## Parameters
  //
  // - kin_id: Kin id
  // - edge: Edge
  //
  // ## Returns
  //
  // - Ok if the edge was added
  rpc AddEdgeWorkflow(AddEdgeWorkflowRequest) returns (AddEdgeWorkflowResponse) {
    option (google.api.http) = {
      post: "/v1/workflow/{id}/edge"
      body: "*"
    };
  }

  // UpdateNodePositionWorkflow
  //
  // ## Parameters
  //
  // - kin_id: Kin id
  // - node_id: Node id
  //
  // ## Returns
  //
  // - Ok if the node position was updated
  rpc UpdateNodePositionWorkflow(UpdateNodePositionWorkflowRequest) returns (UpdateNodePositionWorkflowResponse) {
    option (google.api.http) = {
      put: "/v1/workflow/{id}/node/{node_id}/position"
      body: "*"
    };
  }

  // DeleteNodeWorkflow
  //
  // ## Parameters
  //
  // - kin_id: Kin id
  // - node_id: Node id
  //
  // ## Returns
  //
  // - Ok if the node was deleted
  rpc DeleteNodeWorkflow(DeleteNodeWorkflowRequest) returns (DeleteNodeWorkflowResponse) {
    option (google.api.http) = {
      delete: "/v1/workflow/{id}/node/{node_id}/delete"
    };
  }

  // DeleteEdgeWorkflow
  //
  // ## Parameters
  //
  // - kin_id: Kin id
  // - edge_id: Edge id
  //
  // ## Returns
  //
  // - Ok if the edge was deleted
  rpc DeleteEdgeWorkflow(DeleteEdgeWorkflowRequest) returns (DeleteEdgeWorkflowResponse) {
    option (google.api.http) = {
      delete: "/v1/workflow/{id}/edge/{edge_id}/delete"
    };
  }
}

// DataEdge
//
// ## Fields
//
// - color: Edge color
// - running: Edge running
message DataEdge {
  // color: Edge color
  string color = 1;
  // running: Edge running
  bool running = 2;
}

// Edge
//
// ## Fields
//
// - id: Edge id
// - source: Edge source
// - source_handle: Edge source handle
// - target: Edge target
// - target_handle: Edge target handle
// - type: Edge type
// - data: Edge data
message Edge {
  // id: Edge id
  string id = 1;
  // source: Edge source
  string source = 2;
  // source_handle: Edge source handle
  optional string source_handle = 3;
  // target: Edge target
  string target = 4;
  // target_handle: Edge target handle
  optional string target_handle = 5;
  // type: Edge type
  optional string type = 6;
  // data: Edge data
  DataEdge data = 7;
}

// Position
//
// ## Fields
//
// - x: X position
// - y: Y position
message Position {
  // x: X position
  float x = 1;
  // y: Y position
  float y = 2;
}

// Target
//
// ## Fields
//
// - label: Target label
// - type: Target type
message Target {
  // label: Target label
  string label = 1;
  // type: Target type
  string type = 2;
}

// Source
//
// ## Fields
//
// - label: Source label
// - type: Source type
message Source {
  // label: Source label
  string label = 1;
  // type: Source type
  string type = 2;
}
  
// DataNode
//
// ## Fields
//
// - id: Node id
// - name: Node name
message DataNode {
  // id: Node id
  string id = 1;
  // name: Node name
  string name = 2;
  // type: Node type
  string type = 3;
  // color: Node color
  string color = 4;
  // targets: List of targets
  repeated Target targets = 5;
  // sources: List of sources
  repeated Source sources = 6;
}

// Measured
//
// ## Fields
//
// - width: Measured width
// - height: Measured height
message Measured {
  // width: Measured width
  int64 width = 1;
  // height: Measured height
  int64 height = 2;
}

// Node
//
// ## Fields
//
// - id: Node id
// - type: Node type
// - position: Node position
// - data: Node data
// - measured: Node measured
// - selected: Node selected
// - dragging: Node dragging
message Node {
  // id: Node id
  string id = 1;
  // type: Node type
  string type = 2;
  // position: Node position
  Position position = 3;
  // data: Node data
  DataNode data = 4;
  // measured: Node measured
  optional Measured measured = 7;
  // selected: Node selected
  bool selected = 8;
  // dragging: Node dragging
  bool dragging = 9;
}

// Workflow
//
// ## Fields
//
// - edges: List of edges
// - nodes: List of nodes
message Workflow {
  // edges: List of edges
  repeated Edge edges = 1;
  // nodes: List of nodes
  repeated Node nodes = 2;
}

// CreateKinWorkflowRequest
//
// ## Fields
//
// - kin_id: Kin id
message CreateKinWorkflowRequest {
  // kin_id: Kin id
  string kin_id = 1;
}

// ReadKinWorkflowRequest
//
// ## Fields
//
// - kin_id: Kin id
message ReadKinWorkflowRequest {
  // kin_id: Kin id
  string kin_id = 1;
}

// ReadKinNodesWorkflowRequest
//
// ## Fields
//
// - Nothing
message ReadKinNodesWorkflowRequest {
}

// ReadKinNodesWorkflowResponse
//
// ## Returns
//
// - data_nodes: List of nodes
message ReadKinNodesWorkflowResponse {
  // data_nodes: List of nodes
  repeated DataNode data_nodes = 1;
}

// AddNodeWorkflowRequest
//
// ## Fields
//
// - kin_id: Kin id
// - node: Node
message AddNodeWorkflowRequest {
  // kin_id: Kin id
  string kin_id = 1;
  // node: Node
  Node node = 2;
}
// AddNodeWorkflowResponse
//
// ## Returns
//
// - Ok if the node was added
message AddNodeWorkflowResponse {
}

// AddEdgeWorkflowRequest
//
// ## Fields
//
// - kin_id: Kin id
// - edge: Edge
message AddEdgeWorkflowRequest {
  // kin_id: Kin id
  string kin_id = 1;
  // edge: Edge
  Edge edge = 2;
}
// AddEdgeWorkflowResponse
//
// ## Returns
//
// - Ok if the edge was added
message AddEdgeWorkflowResponse {
}

// UpdateNodePositionWorkflowRequest
//
// ## Fields
//
// - kin_id: Kin id
// - node_id: Node id
// - position: Position
message UpdateNodePositionWorkflowRequest {
  // kin_id: Kin id
  string kin_id = 1;
  // node_id: Node id
  string node_id = 2;
  // position: Position
  Position position = 3;
}
// UpdateNodePositionWorkflowResponse
//
// ## Returns
//
// - Ok if the node position was updated
message UpdateNodePositionWorkflowResponse {
}

// DeleteNodeWorkflowRequest
//
// ## Fields
//
// - kin_id: Kin id
// - node_id: Node id
message DeleteNodeWorkflowRequest {
  // kin_id: Kin id
  string kin_id = 1;
  // node_id: Node id
  string node_id = 2;
}
// DeleteNodeWorkflowResponse
//
// ## Returns
//
// - Ok if the node was deleted
message DeleteNodeWorkflowResponse {
}

// DeleteEdgeWorkflowRequest
//
// ## Fields
//
// - kin_id: Kin id
// - edge_id: Edge id
message DeleteEdgeWorkflowRequest {
  // kin_id: Kin id
  string kin_id = 1;
  // edge_id: Edge id
  string edge_id = 2;
}
// DeleteEdgeWorkflowResponse
//
// ## Returns
//
// - Ok if the edge was deleted
message DeleteEdgeWorkflowResponse {
}
  