syntax = "proto3";

package digitalkin.kin.v1;

import "google/api/annotations.proto";

import "digitalkin/kin/v1/kin_response.proto";

service KinThreadService {
    // CRD
    rpc CreateKinThread(CreateKinThreadRequest) returns (KinThread) {
        option (google.api.http) = {
            post: "/v1/kin/thread"
            body: "*"
        };
    }
    rpc ReadKinThread(ReadKinThreadRequest) returns (stream KinThread) {
        option (google.api.http) = {
            get: "/v1/kin/thread/{kin_thread_id}"
        };
    }
    rpc DeleteKinThread(DeleteKinThreadRequest) returns (DeleteKinThreadResponse) {
        option (google.api.http) = {
            delete: "/v1/kin/thread/{kin_thread_id}"
        };
    }

    // Update
    rpc UpdateSubject(UpdateSubjectRequest) returns (UpdateSubjectResponse) {
        option (google.api.http) = {
            patch: "/v1/kin/thread/{kin_thread_id}/subject"
            body: "*"
        };
    }

    // Kin response
    rpc CreateKinResponse(CreateKinResponseRequest) returns (KinResponse) {
        option (google.api.http) = {
            post: "/v1/kin/thread/{kin_thread_id}/create"
            body: "*"
        };
    }
    rpc ReplyInTheThread(ReplyInTheThreadRequest) returns (KinResponse) {
        option (google.api.http) = {
            post: "/v1/kin/thread/{kin_thread_id}/reply"
            body: "*"
        };
    }
}

// Common
message File {
    string name = 1;
    string type = 2;
    bytes content = 3;
}

message KinThread {
    Thing id = 1;
    string thread_subject = 2;
    repeated KinResponse responses = 3;
    bool activated = 4;
}

// Create Kin Thread
message CreateKinThreadRequest {
    string thread_subject = 1;
    Thing kin_id = 2;
}

// Read Kin Thread
message ReadKinThreadRequest {
    Thing kin_thread_id = 1;
}

// Delete Kin Thread
message DeleteKinThreadRequest {
    Thing kin_thread_id = 1;
}
message DeleteKinThreadResponse {}

// Update Subject
message UpdateSubjectRequest {
    Thing kin_thread_id = 1;
    string subject = 2;
}
message UpdateSubjectResponse {}

// Create Kin Response
message CreateKinResponseRequest {
    Thing kin_thread_id = 1;
    string mission = 2;
    repeated File files = 3;
}

// Reply In The Thread
message ReplyInTheThreadRequest {
    Thing kin_thread_id = 1;
    string mission = 2;
    repeated File files = 3;
}

