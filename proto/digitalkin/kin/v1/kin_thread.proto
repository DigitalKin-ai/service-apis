// Copyright 2024 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// List of available options:
// https://github.com/yoheimuta/protolint/blob/master/_example/config/.protolint.yaml

syntax = "proto3";

package digitalkin.kin.v1;

import "digitalkin/common/v1/common.proto";
import "digitalkin/kin/v1/kin_response.proto";
import "google/api/annotations.proto";

// KinThreadService
service KinThreadService {
  // CreateKinThread
  //
  // ## Parameters
  //
  // - thread_subject: Thread subject
  // - kin_id: Kin id
  //
  // ## Returns
  //
  // - KinThread
  rpc CreateKinThread(CreateKinThreadRequest) returns (KinThread) {
    option (google.api.http) = {
        post: "/v1/kin/thread"
        body: "*"
    };
  }

  // ReadKinThread
  //
  // ## Parameters
  //
  // - kin_thread_id: Kin thread id
  //
  // ## Returns
  //
  // - KinThread
  rpc ReadKinThread(ReadKinThreadRequest) returns (stream KinThread) {
    option (google.api.http) = {
        get: "/v1/kin/thread/{kin_thread_id}"
    };
  }

  // ReadKinThreadsActivity
  //
  // ## Parameters
  //
  // - optional kin_id: Kin id
  //
  // ## Returns
  //
  // - KinThreadsActivity
  rpc ReadKinThreadsActivity(ReadKinThreadsActivitiesRequest) returns (stream KinThreadsActivities) {
    option (google.api.http) = {
      get: "/v1/kin/thread/activity"
    };
  }

  // DeleteKinThread
  //
  // ## Parameters
  //
  // - kin_thread_id: Kin thread id
  //
  // ## Returns
  //
  // - Ok if the thread was deleted
  rpc DeleteKinThread(DeleteKinThreadRequest) returns (DeleteKinThreadResponse) {
    option (google.api.http) = {
        delete: "/v1/kin/thread/{kin_thread_id}/delete"
    };
  }

  // UpdateSubject
  //
  // ## Parameters
  //
  // - kin_thread_id: Kin thread id
  // - subject: Subject of the thread
  //
  // ## Returns
  //
  // - Ok if the subject was updated
  rpc UpdateSubject(UpdateSubjectRequest) returns (UpdateSubjectResponse) {
    option (google.api.http) = {
        patch: "/v1/kin/thread/{kin_thread_id}/subject"
        body: "*"
    };
  }
}

// KinThread
//
// ## Fields
//
// - id: Kin thread id
// - thread_subject: Subject of the thread
// - worflow: Workflow
// - kin: Kin
// - responses: Responses
// - activated: Activated
message KinThread {
  // id: Kin thread id
  string id = 1;
  // thread_subject: Subject of the thread
  string thread_subject = 2;
  // workflow: workflow
  optional digitalkin.common.v1.WorkflowReply workflow = 3;
  // kin: kin
  digitalkin.common.v1.KinReply kin = 4;
  // responses: Responses
  repeated KinResponse responses = 5;
  // activated: Activated
  bool activated = 6;
}

// CreateKinThreadRequest
//
// ## Fields
//
// - thread_subject: Thread subject
// - kin_id: Kin id
message CreateKinThreadRequest {
  // thread_subject: Thread subject
  string thread_subject = 1;
  // kin_id: Kin id
  string kin_id = 2;
}

// ReadKinThreadRequest
//
// ## Fields
//
// - kin_thread_id: Kin thread id
message ReadKinThreadRequest {
  // kin_thread_id: Kin thread id
  string kin_thread_id = 1;
}

// ReadKinThreadsActivitiesRequest
//
// ## Fields
//
// - kin_id: Kin id
message ReadKinThreadsActivitiesRequest {
  // kin_id: Kin id
  optional string kin_id = 1;
}

// KinThreadsActivities
//
// ## Fields
//
// - kin_threads_activity: Kin threads activity
message KinThreadsActivities {
  // kin_threads_activities: Kin threads activities
  repeated KinThread kin_threads_activities = 1;
}

// DeleteKinThreadRequest
//
// ## Fields
//
// - kin_thread_id: Kin thread id
message DeleteKinThreadRequest {
  // kin_thread_id: Kin thread id
  string kin_thread_id = 1;
}

// DeleteKinThreadResponse
//
// ## Returns
//
// - Ok if the thread was deleted
message DeleteKinThreadResponse {
}

// UpdateSubjectRequest
//
// ## Fields
//
// - kin_thread_id: Kin thread id
// - subject: Subject of the thread
message UpdateSubjectRequest {
  // kin_thread_id: Kin thread id
  string kin_thread_id = 1;
  // subject: Subject of the thread
  string subject = 2;
}

// UpdateSubjectResponse
//
// ## Returns
//
// - Ok if the subject was updated
message UpdateSubjectResponse {
}
