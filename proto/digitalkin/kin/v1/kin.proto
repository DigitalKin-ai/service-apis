syntax = "proto3";

package digitalkin.kin.v1;

import "digitalkin/kin/v1/kin_thread.proto";

service KinService {
    // CRD
    rpc CreateKin(CreateKinRequest) returns (CreateKinResponse);
    rpc ReadKin(ReadKinRequest) returns (stream Kin);
    rpc DeleteKin(DeleteKinRequest) returns (DeleteKinResponse);

    // Update
    rpc UpdateActivated(UpdateKinActivatedRequest) returns (UpdateKinActivatedResponse);
    rpc UpdateName(UpdateKinNameRequest) returns (UpdateKinNameResponse);
    rpc UpdateDescription(UpdateKinDescriptionRequest) returns (UpdateKinDescriptionResponse);
    rpc UpdateOriginAddress(UpdateKinOriginAddressRequest) returns (UpdateKinOriginAddressResponse);
}

// Common
message KinThreadReply {
    string id = 1;
    string thread_subject = 2;
    bool activated = 3;
}

message Kin {
    string id = 1;
    string name = 2;
    optional string description = 3;
    optional string origin_address = 4;
    repeated KinThreadReply kin_threads = 5;
    bool owner = 6;
    bool activated = 7;
}

// Create a new Kin
message CreateKinRequest {
    string name = 1;
    optional string description = 2;
    optional string origin_address = 3;
}
message CreateKinResponse {}

// Read a Kin
message ReadKinRequest {
    string kin_id = 1;
}

// Delete a Kin
message DeleteKinRequest {
    string kin_id = 1;
}
message DeleteKinResponse {}

// Update a Kin activated status
message UpdateKinActivatedRequest {
    string kin_id = 1;
    bool activated = 2;
}
message UpdateKinActivatedResponse { }

// Update a Kin name
message UpdateKinNameRequest {
    string kin_id = 1;
    string name = 2;
}
message UpdateKinNameResponse { }

// Update a Kin description
message UpdateKinDescriptionRequest {
    string kin_id = 1;
    string description = 2;
}
message UpdateKinDescriptionResponse { }

// Update a Kin origin address
message UpdateKinOriginAddressRequest {
    string kin_id = 1;
    string origin_address = 2;
}
message UpdateKinOriginAddressResponse { }
