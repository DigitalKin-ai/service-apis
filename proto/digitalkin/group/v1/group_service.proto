// Copyright 2024 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// List of available options:
// https://github.com/yoheimuta/protolint/blob/master/_example/config/.protolint.yaml

syntax = "proto3";

package digitalkin.group.v1;

import "digitalkin/group/v1/organization.proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// GroupService
service GroupService {
    // CreateOrganization
    //
    //Parameters:
    //
    // - name: The name of the organization
    // - email: The email of the organization
    //
    // Returns:
    //
    // - Organization
    rpc CreateOrganization(CreateOrganizationRequest) returns (Organization) {
        option (google.api.http) = {
            post: "/v1/organization/create"
            body: "*"
        };
    }
    // ReadOrganization
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    //
    // Returns:
    //
    // - Organization
    rpc ReadOrganization(ReadOrganizationRequest) returns (stream Organization) {
        option (google.api.http) = {
            get: "/v1/organization/{organization_id}/read"
        };
    }
    // DeleteOrganization
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    //
    // Returns:
    //
    // - Nothing
    rpc DeleteOrganization(DeleteOrganizationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/organization/{organization_id}/delete"
        };
    }
    // UpdateActivated
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - activated: True if the organization is activated
    //
    // Returns:
    //
    // - Nothing
    rpc UpdateActivated(UpdateOrganizationActivatedRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        patch: "/v1/organization/{organization_id}/activated"
        body: "*"
      };
    }
    // UpdateName
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - name: The name of the organization
    //
    // Returns:
    //
    // - Ok if the organization was updated
    rpc UpdateName(UpdateOrganizationNameRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        patch: "/v1/organization/{organization_id}/name"
        body: "*"
      };
    }
    // UpdateCreditAmount
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - credit_amount: The amount of credit
    //
    // Returns:
    //
    // - Ok if the organization was updated
    rpc UpdateCreditAmount(UpdateOrganizationCreditAmountRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        patch: "/v1/organization/{organization_id}/creditamount"
        body: "*"
      };
    }
    // UpdateLogo
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - logo: The logo of the organization
    //
    // Returns:
    //
    // - Ok if the organization was updated
    rpc UpdateLogo(UpdateOrganizationLogoRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        patch: "/v1/organization/{organization_id}/logo"
        body: "*"
      };
    }
    // RequestChangeEmail
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    //
    // Returns:
    //
    // - Ok if the mail was sent
    rpc RequestChangeEmail(ChangeOrganizationEmailRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        post: "/v1/organization/{organization_id}/email/request"
        body: "*"
      };
    }
    // ResetEmail
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - email: The email of the organization
    // - temp_key: The temp key of the email
    //
    // Returns:
    //
    // - Ok if the mail was sent
    rpc ResetEmail(ResetOrganizationEmailRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        patch: "/v1/user/email/reset"
        body: "*"
      };
    }
    // UpdateEmail
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - email: The email of the organization
    // - temp_key: The temp key of the email
    //
    // Returns:
    //
    // - Ok if the organization was updated
    rpc UpdateEmail(UpdateOrganizationEmailRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        patch: "/v1/organization/{organization_id}/email"
        body: "*"
      };
    }
    // AddUser
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - user_name: The name of the user
    //
    // Returns:
    //
    // - Ok if the user was added
    rpc AddUser(AddOrganizationUserRequest) returns (digitalkin.common.v1.UserReply) {
        option (google.api.http) = {
        post: "/v1/organization/{organization_id}/user"
        body: "*"
      };
    }

    // RemoveUser
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - user_name: The name of the user
    //
    // Returns:
    //
    // - Ok if the user was removed
    rpc RemoveUser(RemoveOrganizationUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        delete: "/v1/organization/{organization_id}/user/{user_name}"
      };
    }

    // AddModerator
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - user_name: The name of the user
    //
    // Returns:
    //
    // - Ok if the user was added
    rpc AddModerator(AddOrganizationModeratorRequest) returns (digitalkin.common.v1.UserReply) {
        option (google.api.http) = {
        post: "/v1/organization/{organization_id}/moderator"
        body: "*"
      };
    }

    // RemoveModerator
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - user_name: The name of the user
    //
    // Returns:
    //
    // - Ok if the user was removed
    rpc RemoveModerator(RemoveOrganizationModeratorRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        delete: "/v1/organization/{organization_id}/moderator/{user_name}"
      };
    }

    // AddKin
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - kin_id: The id of the kin
    //
    // Returns:
    //
    // - Ok if the kin was added
    rpc AddKin(AddOrganizationKinRequest) returns (digitalkin.common.v1.KinReply) {
        option (google.api.http) = {
        post: "/v1/organization/{organization_id}/kin"
        body: "*"
      };
    }

    // RemoveKin
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - kin_id: The id of the kin
    //
    // Returns:
    //
    // - Ok if the kin was removed
    rpc RemoveKin(RemoveOrganizationKinRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
        delete: "/v1/organization/{organization_id}/kin/{kin_id}"
      };
    }

    // ChangeOwner
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    // - user_name: The name of the user
    //
    // Returns:
    //
    // - Ok if the owner was changed
    rpc ChangeOwner(ChangeOrganizationOwnerRequest) returns (ChangeOrganizationOwnerResponse) {
        option (google.api.http) = {
        patch: "/v1/organization/{organization_id}/owner"
        body: "*"
      };
    }

    // RegenerateInvitationCode
    //
    //Parameters:
    //
    // - organization_id: The id of the organization
    //
    // Returns:
    //
    // - Ok if the invitation code was regenerated
    rpc RegenerateInvitationCode(RegenerateOrganizationInvitationCodeRequest) returns (RegenerateOrganizationInvitationCodeResponse) {
        option (google.api.http) = {
        put: "/v1/organization/{organization_id}/invitationcode"
        body: "*"
      };
    }
}
