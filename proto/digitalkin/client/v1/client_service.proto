// Copyright 2024 DigitalKin Inc.
//
// Licensed under the GNU General Public License, Version 3.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     https://www.gnu.org/licenses/gpl-3.0.html
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.

// List of available options:
// https://github.com/yoheimuta/protolint/blob/master/_example/config/.protolint.yaml

syntax = "proto3";

package digitalkin.client.v1;

import "digitalkin/common/v1/common.proto";
import "digitalkin/client/v1/ticketing.proto";
import "digitalkin/client/v1/user.proto";

import "google/api/annotations.proto";
import "google/protobuf/empty.proto";

// ClientService
service ClientService {
    // CreateUser
    //
    // Parameters:
    //
    // - user_name: User name
    // - user_email: User email
    // - user_password: <PASSWORD>
    //
    // Returns:
    //
    // - Nothing
    rpc CreateUser(CreateUserRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/create"
            body: "*"
        };
    }

    // ReadUser
    //
    // Parameters:
    //
    // - Nothing
    //
    // Returns:
    //
    // - User
    rpc ReadUser(google.protobuf.Empty) returns (User) {
        option (google.api.http) = {
            get: "/v1/user/read"
        };
    }

    // DeleteUser
    //
    // Parameters:
    //
    // - Nothing
    //
    // Returns:
    //
    // - Nothing
    rpc DeleteUser(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/user/delete"
        };
    }

    // UpdateActivated
    //
    // Parameters:
    //
    // - user_name: User name
    // - user_activated: User activated
    //
    // Returns:
    //
    // - Nothing
    rpc UpdateActivated(UpdateUserActivatedRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/user/activated/update"
            body: "*"
        };
    }
    // UpdateFirstName
    //
    // Parameters:
    //
    // - first_name: First name
    //
    // Returns:
    //
    // - Nothing
    rpc UpdateFirstName(UpdateUserFirstNameRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/user/first_name/update"
            body: "*"
        };
    }
    // UpdateLastName
    //
    // Parameters:
    //
    // - last_name: Last name
    //
    // Returns:
    //
    // - Nothing
    rpc UpdateLastName(UpdateUserLastNameRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/user/last_name/update"
            body: "*"
        };
    }

    // UpdateUserName
    //
    // Parameters:
    //
    // - user_name: User name
    //
    // Returns:
    //
    // - Nothing
    rpc UpdateUserName(UpdateUserNameRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/user/user_name/update"
            body: "*"
        };
    }

    // VerifyUser
    //
    // Parameters:
    //
    // - temp_key: Temp key
    //
    // Returns:
    //
    // - token: Token
    // - expire_date: Expire date
    rpc VerifyUser(VerifyUserRequest) returns (VerifyUserResponse) {
        option (google.api.http) = {
            patch: "/v1/user/verify"
            body: "*"
        };
    }

    // UpdateUserUsageType
    //
    // Parameters:
    //
    // - usage_types: Usage type
    //
    // Returns:
    //
    // - Nothing
    rpc UpdateUserUsageType(UpdateUserUsageTypeRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/user/usage_types/update"
            body: "*"
        };
    }

    // UpdateAvatar
    //
    // Parameters:
    //
    // - avatar: Avatar
    //
    // Returns:
    //
    // - avatar: Avatar path
    rpc UpdateAvatar(UpdateUserAvatarRequest) returns (UpdateUserAvatarResponse) {
        option (google.api.http) = {
            patch: "/v1/user/avatar/update"
            body: "*"
        };
    }

    // RequestChangePassword
    //
    // Parameters:
    //
    // - Nothing
    //
    // Returns:
    //
    // - Nothing
    rpc RequestChangePassword(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/password/request"
            body: "*"
        };
    }

    // ResetPassword
    //
    // Parameters:
    //
    // - temp_key: Temp key
    // - new_password: New password
    //
    // Returns:
    //
    // - Nothing
    rpc ResetPassword(ResetPasswordRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/user/password/reset"
            body: "*"
        };
    }

    // UpdatePassword
    //
    // Parameters:
    //
    // - new_password: New password
    // - old_password: Old password
    // - temp_key: Temp key
    //
    // Returns:
    //
    // - Nothing
    rpc UpdatePassword(UpdateUserPasswordRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/user/password/update"
            body: "*"
        };
    }

    // RequestChangeEmail
    //
    // Parameters:
    //
    // - Nothing
    //
    // Returns:
    //
    // - Nothing
    rpc RequestChangeEmail(google.protobuf.Empty) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/user/email/request"
            body: "*"
        };
    }

    // ResetEmail
    //
    // Parameters:
    //
    // - temp_key: Temp key
    // - email: Email
    //
    // Returns:
    //
    // - Nothing
    rpc ResetEmail(ResetEmailRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/user/email/reset"
            body: "*"
        };
    }

    // UpdateEmail
    //
    // Parameters:
    //
    // - email: Email
    // - temp_key: Temp key
    //
    // Returns:
    //
    // - Nothing
    rpc UpdateEmail(UpdateUserEmailRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            patch: "/v1/user/email/update"
            body: "*"
        };
    }

    // AddOrganization
    //
    // Parameters:
    //
    // - invitation_code: Invitation code
    //
    // Returns:
    //
    // - Nothing
    rpc AddOrganization(AddUserOrganizationRequest) returns (digitalkin.common.v1.OrganizationReply) {
        option (google.api.http) = {
            post: "/v1/user/organization/{organization_id}/add"
            body: "*"
        };
    }

    // RemoveOrganization
    //
    // Parameters:
    //
    // - organization_id: Organization id
    //
    // Returns:
    //
    // - Nothing
    rpc RemoveOrganization(RemoveUserOrganizationRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            delete: "/v1/user/organization/{organization_id}/delete"
        };
    }

    // CreateTicket
    //
    // Parameters:
    //
    // - ticket_title: Ticket title
    // - description: Ticket description
    // - steps_to_reproduce: Steps to reproduce
    // - expected_behavior: Expected behavior
    // - actual_behavior: Actual behavior
    // - additional_information: Additional information
    //
    // Returns:
    //
    // - Nothing
    rpc CreateTicket(CreateTicketRequest) returns (google.protobuf.Empty) {
        option (google.api.http) = {
            post: "/v1/ticket/create"
            body: "*"
        };
    }
}
